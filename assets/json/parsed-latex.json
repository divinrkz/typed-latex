{
  "type": "Latex",
  "children": [
    {
      "type": "Comment",
      "value": "% This is a simple sample document.  For more complicated documents take a look in the exercise tab. Note that everything that comes after a % symbol is treated as comment and ignored when the code is compiled."
    },
    {
      "type": "Macro",
      "name": "documentclass",
      "args": [
        {
          "type": "Text",
          "value": "{article}"
        }
      ]
    },
    {
      "type": "Comment",
      "value": "% \\documentclass{} is the first command in any LaTeX code.  It is used to define what kind of document you are creating such as an article or a book, and begins the document preamble"
    },
    {
      "type": "Macro",
      "name": "usepackage",
      "args": [
        {
          "type": "Text",
          "value": "{amsmath}"
        }
      ]
    },
    {
      "type": "Comment",
      "value": "% \\usepackage is a command that allows you to add functionality to your LaTeX code"
    },
    {
      "type": "Macro",
      "name": "title",
      "args": [
        {
          "type": "Text",
          "value": "{Sample 2}"
        }
      ]
    },
    {
      "type": "Comment",
      "value": "% Sets article title"
    },
    {
      "type": "Macro",
      "name": "author",
      "args": [
        {
          "type": "Text",
          "value": "{My Name}"
        }
      ]
    },
    {
      "type": "Comment",
      "value": "% Sets authors name"
    },
    {
      "type": "Macro",
      "name": "date",
      "args": [
        {
          "type": "Text",
          "value": "{\\today}"
        }
      ]
    },
    {
      "type": "Comment",
      "value": "% Sets date for date compiled"
    },
    {
      "type": "Comment",
      "value": "% The preamble ends with the command \\begin{document}"
    },
    {
      "type": "Environment",
      "name": "document",
      "children": [
        {
          "type": "Macro",
          "name": "title",
          "args": [
            {
              "type": "Text",
              "value": "{A Simple Proof in Number Theory}"
            }
          ]
        },
        {
          "type": "Macro",
          "name": "author",
          "args": [
            {
              "type": "Text",
              "value": "{Author Name}"
            }
          ]
        },
        {
          "type": "Macro",
          "name": "date",
          "args": [
            {
              "type": "Text",
              "value": "{\\today}"
            }
          ]
        },
        {
          "type": "Macro",
          "name": "maketitle",
          "args": []
        },
        {
          "type": "Macro",
          "name": "section",
          "args": [
            {
              "type": "Text",
              "value": "{Proof}"
            }
          ]
        },
        {
          "type": "Macro",
          "name": "textbf",
          "args": [
            {
              "type": "Text",
              "value": "{Theorem:}"
            }
          ]
        },
        {
          "type": "Text",
          "value": " For any integer "
        },
        {
          "type": "Math",
          "value": "Symbol('a')"
        },
        {
          "type": "Text",
          "value": ", if "
        },
        {
          "type": "Math",
          "value": "LessThan(Symbol('a'), Symbol('b'))"
        },
        {
          "type": "Text",
          "value": ", then "
        },
        {
          "type": "Math",
          "value": "LessThan(Add(Symbol('a'), Symbol('c')), Add(Symbol('b'), Symbol('c')))"
        },
        {
          "type": "Text",
          "value": " for any integer "
        },
        {
          "type": "Math",
          "value": "Symbol('c')"
        },
        {
          "type": "Text",
          "value": ".\n\n"
        },
        {
          "type": "Macro",
          "name": "textbf",
          "args": [
            {
              "type": "Text",
              "value": "{Proof:}"
            }
          ]
        },
        {
          "type": "Text",
          "value": "\nLet "
        },
        {
          "type": "Math",
          "value": "Symbol('a')"
        },
        {
          "type": "Text",
          "value": " and "
        },
        {
          "type": "Math",
          "value": "Symbol('c')"
        },
        {
          "type": "Text",
          "value": " be arbitrary integers such that "
        },
        {
          "type": "Math",
          "value": "LessThan(Symbol('a'), Symbol('b'))"
        },
        {
          "type": "Text",
          "value": ". We need to show that "
        },
        {
          "type": "Math",
          "value": "LessThan(Add(Symbol('a'), Symbol('c')), Add(Symbol('b'), Symbol('c')))"
        },
        {
          "type": "Text",
          "value": ".\n\nGiven "
        },
        {
          "type": "Math",
          "value": "LessThan(Symbol('a'), Symbol('b'))"
        },
        {
          "type": "Text",
          "value": ", we can add the integer "
        },
        {
          "type": "Math",
          "value": "Symbol('c')"
        },
        {
          "type": "Text",
          "value": " to both sides of the inequality:\n"
        },
        {
          "type": "Environment",
          "name": "equation",
          "children": [
            {
              "type": "Environment",
              "name": "split",
              "children": [
                {
                  "type": "MultilineMath",
                  "value": [
                    "LessThan(Add(Symbol('a'), Symbol('c')), Add(Symbol('b'), Symbol('c')))",
                    "And(GreaterThan(Symbol('b'), Symbol('c')), LessThan(Symbol('a'), Symbol('b')), StrictLessThan(Symbol('c'), Symbol('d')))"
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Text",
          "value": "\nThis follows from the basic properties of inequalities, where adding the same number to both sides of an inequality preserves the inequality.\n\nThus, we have shown that if "
        },
        {
          "type": "Math",
          "value": "LessThan(Symbol('a'), Symbol('b'))"
        },
        {
          "type": "Text",
          "value": ", then "
        },
        {
          "type": "Math",
          "value": "LessThan(Add(Symbol('a'), Symbol('c')), Add(Symbol('b'), Symbol('c')))"
        },
        {
          "type": "Text",
          "value": " for any integer "
        },
        {
          "type": "Math",
          "value": "Symbol('c')"
        },
        {
          "type": "Text",
          "value": ". "
        },
        {
          "type": "Macro",
          "name": "n",
          "args": []
        },
        {
          "type": "Text",
          "value": "\nThis just a line to add all the inequalities Let "
        },
        {
          "type": "Math",
          "value": "Equality(Symbol('x'), Integer(3))"
        },
        {
          "type": "Text",
          "value": " and "
        },
        {
          "type": "Math",
          "value": "Equality(Symbol('y'), Integer(4))"
        },
        {
          "type": "Text",
          "value": ". So, "
        },
        {
          "type": "Math",
          "value": "Unequality(Symbol('x'), Symbol('y'))"
        },
        {
          "type": "Text",
          "value": ". Also, we could say "
        },
        {
          "type": "Math",
          "value": "StrictGreaterThan(Symbol('y'), Symbol('x'))"
        },
        {
          "type": "Text",
          "value": " and "
        },
        {
          "type": "Math",
          "value": "GreaterThan(Symbol('y'), Symbol('x'))"
        },
        {
          "type": "Text",
          "value": " is also valid.\n\nAlso, "
        },
        {
          "type": "Math",
          "value": "Equality(Equality(Symbol('n'), Symbol('m')), Symbol('p'))"
        },
        {
          "type": "Text",
          "value": " and "
        },
        {
          "type": "Math",
          "value": "And(StrictLessThan(Integer(0), Symbol('x')), StrictLessThan(Symbol('x'), Integer(16)))"
        },
        {
          "type": "Text",
          "value": " and for "
        },
        {
          "type": "Math",
          "value": [
            "In(Symbol('y'), Mathbb(Symbol('N')))"
          ]
        },
        {
          "type": "Math",
          "value": "And(GreaterThan(Symbol('b'), Symbol('c')), LessThan(Symbol('a'), Symbol('b')), StrictLessThan(Symbol('c'), Symbol('d')))"
        },
        {
          "type": "Math",
          "value": "Add(Symbol('a'), Symbol('b'))"
        }
      ]
    }
  ]
}
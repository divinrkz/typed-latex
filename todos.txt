- Build Json
- Deserialize Json to Latex
- Match Text with patterns
- Extract matches
- Perform Type Checking
    - identify variables.
    - find assignments/sets in.
    - identify right hand expression.
    - resolve types.


*Assume no hoisting involved. 

- Cova

Word -> any word of the pattern
Any -> when I have splits of | ex: |some|all|none
Sequence -> Any grouping > 1 elements
Optional -> when using ?
Repeat -> !!!!!!!
TypeName -> gotta check pre word and nth split
DefContainer -> how to identify is trick
MathPattern -> how to identify is all tricky
OptRepeat -> !!

MathPattern -> TerminalSymbol -> just a symbol
Function -> any operation of expressions
Expression -> any expressions.


suggestion to maybe think about restructing the patterns in a way that helps.



Patterns: MSet is a \mathbb set.





Pattern rewriting
1. If D that's a definition
2. If M that a relation also to be relation
3. Don't ignore semicolons.
4. don't skip, 
5. 


PATTERNS WITH PROBLEMS.
Line 23
Line 24
Line 30
Line 32
Line 33
Line 34
Line 49
Line 52
Line 87
Line 93
Line 98
Line 99
Line 119
Line 120


The common pattern is these that they have grouped patterns 
like optionals in any or optional in optional

